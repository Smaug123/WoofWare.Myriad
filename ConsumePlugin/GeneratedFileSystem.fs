//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------





namespace ConsumePlugin

open WoofWare.Myriad.Plugins

/// Description of how to combine cases during a fold
type FileSystemItemCataCase<'FileSystemItem> =
    /// How to operate on the Directory case
    abstract Directory : name : string -> dirSize : int -> contents : 'FileSystemItem list -> 'FileSystemItem
    /// How to operate on the File case
    abstract File : File -> 'FileSystemItem

/// Specifies how to perform a fold (catamorphism) over the type FileSystemItem and its friends.
type FileSystemCata<'FileSystemItem> =
    {
        /// How to perform a fold (catamorphism) over the type FileSystemItem
        FileSystemItem : FileSystemItemCataCase<'FileSystemItem>
    }

/// Methods to perform a catamorphism over the type FileSystemItem
[<RequireQualifiedAccess>]
module FileSystemItemCata =
    [<RequireQualifiedAccess>]
    type private Instruction =
        | Process__FileSystemItem of FileSystemItem
        | FileSystemItem_Directory of string * int * int

    let private loop (cata : FileSystemCata<_>) (instructions : ResizeArray<Instruction>) =
        let fileSystemItemStack = ResizeArray ()

        while instructions.Count > 0 do
            let currentInstruction = instructions.[instructions.Count - 1]
            instructions.RemoveAt (instructions.Count - 1)

            match currentInstruction with
            | Instruction.Process__FileSystemItem x ->
                match x with
                | FileSystemItem.Directory ({
                                                Name = name
                                                DirSize = dirSize
                                                Contents = contents
                                            }) ->
                    instructions.Add (Instruction.FileSystemItem_Directory (name, dirSize, (List.length contents)))

                    for elt in contents do
                        instructions.Add (Instruction.Process__FileSystemItem elt)
                | FileSystemItem.File (arg0_0) -> cata.FileSystemItem.File arg0_0 |> fileSystemItemStack.Add
            | Instruction.FileSystemItem_Directory (name, dirSize, contents) ->
                let contents_len = contents

                let contents =
                    seq {
                        for i = fileSystemItemStack.Count - 1 downto fileSystemItemStack.Count - contents do
                            yield fileSystemItemStack.[i]
                    }
                    |> Seq.toList

                fileSystemItemStack.RemoveRange (fileSystemItemStack.Count - contents_len, contents_len)
                cata.FileSystemItem.Directory name dirSize contents |> fileSystemItemStack.Add

        fileSystemItemStack

    /// Execute the catamorphism.
    let runFileSystemItem (cata : FileSystemCata<'FileSystemItemRet>) (x : FileSystemItem) : 'FileSystemItemRet =
        let instructions = ResizeArray ()
        instructions.Add (Instruction.Process__FileSystemItem x)
        let fileSystemItemRetStack = loop cata instructions
        Seq.exactlyOne fileSystemItemRetStack
